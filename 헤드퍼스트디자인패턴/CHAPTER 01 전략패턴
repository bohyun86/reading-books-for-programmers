# 전략패턴(Strategy Pattern)

- 알고리즘군을 정의하고 캡슐화해서 각각의 알고리즘군을 수정해서 쓸 수 있게 함 
- 전략 패턴을 사용하면 클라이언트로부터 알고리즘을 분리해서 독립적으로 변경할 수 있음

## 요약

- 알고리즘군을 만들고(인터페이스 및 인터페이스 구현 클래스)
- 알고리즘군을 사용하는 클래스 내부에 알고리즘 객체를 가지고 있음
- 알고리즘 인터페이스를 구현한 클래스를 전달해서 동적으로 알고리즘을 변경할 수 있음

***전략패턴의 구성요소***

1. 전략(Strategy) 인터페이스

- 알고리즘을 구현하기 위한 인터페이스
- 알고리즘을 구현한 클래스는 이 인터페이스를 구현함

2. 구체적인 전략(Concrete Strategy) 클래스

- 전략 인터페이스를 구현한 클래스
- 알고리즘을 구현함

3. 컨텍스트(Context) 클래스

- 전략을 사용하는 역할
- 전략을 사용하는 클라이언트에게 전략을 제공함


## 디자인원칙

1. 애플리케이션에서 달라지는 부분을 찾아내고, 달라지지 않는 부분으로부터 분리시킨다.

- 코드를 변경하는 과정에서 의도치 않게 발생하는 일을 줄이면서 시스템의 유연성 향상 가능

2. 구현이 아닌 인터페이스에 맞춰서 프로그래밍한다.

- 구현이 아닌 인터페이스에 맞춰서 프로그래밍하면, 구현이 바뀌더라도 프로그램이 영향을 받지 않는다.

3. 상속보다는 구성을 활용한다.

- 상속은 캡슐화를 깨뜨릴 수 있기 때문에, 상속보다는 구성을 활용하는 것이 좋다.
- ex) 오리의 나는 행동과 꽥꽥거리는 행동을 구성을 통해 구현

